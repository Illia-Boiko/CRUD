{"version":3,"sources":["requests.ts","components/Button/Button.tsx","components/Post/Post.tsx","components/ListOfPosts/ListOfPosts.tsx","components/Menu/Menu.tsx","components/SubmitButton/SubmitButton.tsx","components/Form/Form.tsx","components/Sidebar/Sidebar.tsx","App.tsx","index.tsx"],"names":["URL","getListOfPostsFromServer","a","fetch","listOfTodos","ok","json","Button","props","onClick","name","type","className","Post","post","id","title","body","ListOfPosts","posts","map","Menu","onCreateVisible","onDeleteVisible","onUpdateVisible","useState","listOfPosts","setListOfPosts","isListVisible","setIsListVisible","getListOfPosts","useEffect","SubmitButton","Form","isCreateVisible","isUpdateVisible","isDeleteVisible","onCreateHidden","onUpdateHidden","onDeleteHidden","userId","creatingData","setCreatingData","updatingData","setUpdatingData","deleteData","setDeleteData","handleCreateChange","event","target","value","handleUpdateChange","placeholder","onChange","postUserId","postTitle","postBody","method","headers","JSON","stringify","createNewPostOnServer","postId","updatePostByIdOnServer","Number","deletePostByIdFromServer","Sidebar","App","isCreatePostFormVisible","setIsCreatePostFormVisible","isUpdatePostFormVisible","setIsUpdatePostFormVisible","isDeletePostFormVisible","setIsDeletePostFormVisible","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8dec05a2.chunk.js","sourcesContent":["// const URL = 'https://jsonplaceholder.typicode.com/posts';\nconst URL = 'https://mate.academy/students-api/posts';\n\nexport async function getListOfPostsFromServer(): Promise<Post[] | null> {\n  const listOfTodos = await fetch(URL);\n\n  if (listOfTodos.ok) {\n    return listOfTodos.json();\n  }\n\n  return null;\n}\n\nexport const createNewPostOnServer = (postUserId = 0, postTitle = '', postBody = '') => {\n  return (\n    fetch(URL, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n      body: JSON.stringify({\n        userId: postUserId,\n        title: postTitle,\n        body: postBody,\n      }),\n    })\n  );\n};\n\nexport const deletePostByIdFromServer = (postId = 0) => {\n  return (\n    fetch(`${URL}/${postId}`, {\n      method: 'DELETE',\n    })\n  );\n};\n\nexport const updatePostByIdOnServer = (postId = 0, postTitle = '', postBody = '') => {\n  return (\n    fetch(`${URL}/${postId}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n      body: JSON.stringify({\n        title: postTitle,\n        body: postBody,\n      }),\n    })\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  onClick: () => void;\n  name: string;\n};\n\nexport const Button: React.FC<Props> = (props) => {\n  const { onClick, name } = props;\n\n  return (\n    <button\n      type=\"button\"\n      onClick={onClick}\n      className=\"button is-light\"\n    >\n      {name}\n    </button>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  post: Post;\n};\n\nexport const Post: React.FC<Props> = (props) => {\n  const { post } = props;\n\n  return (\n    <li\n      className=\"Post content is-normal\"\n    >\n      <span className=\"Post__id\">\n        {`Post id: ${post.id}`}\n      </span>\n      <h2 className=\"Post__title\">\n        {post.title}\n      </h2>\n      <span className=\"Post__body\">\n        {post.body}\n      </span>\n    </li>\n  );\n};\n","import React, { Fragment } from 'react';\nimport { Post } from '../Post';\n\ntype Props = {\n  posts: Post[] | null;\n};\n\nexport const ListOfPosts: React.FC<Props> = (props) => {\n  const { posts } = props;\n\n  return (\n    <ul className=\"ListOfPosts\">\n      {posts?.map(post => (\n        <Fragment key={post.id}>\n          <Post post={post} />\n        </Fragment>\n      ))}\n    </ul>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getListOfPostsFromServer } from '../../requests';\nimport { Button } from '../Button';\nimport { ListOfPosts } from '../ListOfPosts';\n\ntype Props = {\n  onCreateVisible: () => void;\n  onUpdateVisible: () => void;\n  onDeleteVisible: () => void;\n  isCreateVisible: boolean;\n  isUpdateVisible: boolean;\n  isDeleteVisible: boolean;\n};\n\nexport const Menu: React.FC<Props> = (props) => {\n  const {\n    onCreateVisible,\n    onDeleteVisible,\n    onUpdateVisible,\n  } = props;\n\n  const [listOfPosts, setListOfPosts] = useState<Post[] | null>([]);\n  const [isListVisible, setIsListVisible] = useState(false);\n\n  const changeVisibilityOfList = () => {\n    setIsListVisible(!isListVisible);\n  };\n\n  const getListOfPosts = (async () => {\n    const posts = await getListOfPostsFromServer();\n\n    setListOfPosts(posts);\n  });\n\n  useEffect(() => {\n    getListOfPosts();\n  }, []);\n\n  return (\n    <main className=\"Menu App__Menu box\">\n      <div className=\"Menu__button-container\">\n        <Button\n          name=\"Update list\"\n          onClick={getListOfPosts}\n        />\n        <Button\n          name={isListVisible ? 'Hide list of posts' : 'Show list of posts'}\n          onClick={changeVisibilityOfList}\n        />\n        <Button\n          name=\"New post\"\n          onClick={onCreateVisible}\n        />\n        <Button\n          name=\"Update post\"\n          onClick={onUpdateVisible}\n        />\n        <Button\n          name=\"Delete post\"\n          onClick={onDeleteVisible}\n        />\n      </div>\n      {isListVisible && (\n        <ListOfPosts posts={listOfPosts} />\n      )}\n    </main>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  onClick: () => void\n};\n\nexport const SubmitButton: React.FC<Props> = (props) => {\n  const { onClick } = props;\n\n  return (\n    <button\n      type=\"button\"\n      onClick={onClick}\n      className=\"button is-dark\"\n    >\n      Ok\n    </button>\n  );\n};\n","import React, { useState } from 'react';\nimport { Button } from '../Button';\nimport { SubmitButton } from '../SubmitButton';\nimport {\n  createNewPostOnServer,\n  updatePostByIdOnServer,\n  deletePostByIdFromServer,\n} from '../../requests';\n\ntype Props = {\n  isCreateVisible: boolean;\n  isUpdateVisible: boolean;\n  isDeleteVisible: boolean;\n  onCreateHidden: () => void;\n  onUpdateHidden: () => void;\n  onDeleteHidden: () => void;\n};\n\ntype Event = React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLTextAreaElement>;\n\nexport const Form: React.FC<Props> = (props) => {\n  const {\n    isCreateVisible,\n    isUpdateVisible,\n    isDeleteVisible,\n    onCreateHidden,\n    onUpdateHidden,\n    onDeleteHidden,\n  } = props;\n\n  const [creatingData, setCreatingData] = useState<Partial<Post>>({\n    userId: 0,\n    title: '',\n    body: '',\n  });\n  const [updatingData, setUpdatingData] = useState<Partial<Post>>({\n    id: 0,\n    title: '',\n    body: '',\n  });\n  const [deleteData, setDeleteData] = useState(0);\n\n  const createPost = () => {\n    const { userId, title, body } = creatingData;\n\n    createNewPostOnServer(userId, title, body);\n    onCreateHidden();\n  };\n\n  const handleCreateChange = (event: Event) => {\n    const { name, value } = event.target;\n\n    setCreatingData({\n      ...creatingData,\n      [name]: value,\n    });\n  };\n\n  const updatePost = () => {\n    const { id, title, body } = updatingData;\n\n    updatePostByIdOnServer(id, title, body);\n    onUpdateHidden();\n  };\n\n  const handleUpdateChange = (event: Event) => {\n    const { name, value } = event.target;\n\n    setUpdatingData({\n      ...updatingData,\n      [name]: value,\n    });\n  };\n\n  const deletePost = () => {\n    deletePostByIdFromServer(deleteData);\n    onDeleteHidden();\n  };\n\n  const handleDeleteChange = (event: Event) => {\n    setDeleteData(Number(event.target.value));\n  };\n\n  return (\n    <form className=\"Form field\">\n      {isCreateVisible && (\n        <>\n          <input\n            type=\"number\"\n            name=\"userId\"\n            placeholder=\"Enter user id\"\n            className=\"Form__input input\"\n            value={creatingData.userId}\n            onChange={handleCreateChange}\n          />\n          <input\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Enter the title\"\n            className=\"Form__input input\"\n            value={creatingData.title}\n            onChange={handleCreateChange}\n          />\n          <textarea\n            name=\"body\"\n            placeholder=\"Enter the body\"\n            className=\"Form__input input\"\n            value={creatingData.body}\n            onChange={handleCreateChange}\n          />\n          <div className=\"Form__buttons-container\">\n            <Button\n              name=\"Cancel\"\n              onClick={onCreateHidden}\n            />\n            <SubmitButton onClick={createPost} />\n          </div>\n        </>\n      )}\n      {isUpdateVisible && (\n        <>\n          <input\n            type=\"number\"\n            name=\"id\"\n            placeholder=\"Enter post id\"\n            className=\"Form__input input\"\n            value={updatingData.id}\n            onChange={handleUpdateChange}\n          />\n          <input\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Enter the title\"\n            className=\"Form__input input\"\n            value={updatingData.title}\n            onChange={handleUpdateChange}\n          />\n          <textarea\n            name=\"body\"\n            placeholder=\"Enter the body\"\n            className=\"Form__input input\"\n            value={updatingData.body}\n            onChange={handleUpdateChange}\n          />\n          <div className=\"Form__buttons-container\">\n            <Button\n              name=\"Cancel\"\n              onClick={onUpdateHidden}\n            />\n            <SubmitButton onClick={updatePost} />\n          </div>\n        </>\n      )}\n      {isDeleteVisible && (\n        <>\n          <input\n            type=\"number\"\n            name=\"id\"\n            placeholder=\"Enter id\"\n            className=\"Form__input input\"\n            value={deleteData}\n            onChange={handleDeleteChange}\n          />\n          <div className=\"Form__buttons-container\">\n            <Button\n              name=\"Cancel\"\n              onClick={onDeleteHidden}\n            />\n            <SubmitButton onClick={deletePost} />\n          </div>\n        </>\n      )}\n    </form>\n  );\n};\n","import React from 'react';\nimport { Form } from '../Form';\n\ntype Props = {\n  isCreateVisible: boolean;\n  isUpdateVisible: boolean;\n  isDeleteVisible: boolean;\n  onCreateHidden: () => void;\n  onUpdateHidden: () => void;\n  onDeleteHidden: () => void;\n};\n\nexport const Sidebar: React.FC<Props> = (props) => {\n  const {\n    isCreateVisible,\n    isUpdateVisible,\n    isDeleteVisible,\n    onCreateHidden,\n    onUpdateHidden,\n    onDeleteHidden,\n  } = props;\n\n  return (\n    <div className=\"eclipse\">\n      <section className=\"Sidebar box\">\n        <Form\n          isCreateVisible={isCreateVisible}\n          isUpdateVisible={isUpdateVisible}\n          isDeleteVisible={isDeleteVisible}\n          onCreateHidden={onCreateHidden}\n          onUpdateHidden={onUpdateHidden}\n          onDeleteHidden={onDeleteHidden}\n        />\n      </section>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { Menu } from './components/Menu';\nimport { Sidebar } from './components/Sidebar';\n\nexport const App: React.FC = () => {\n  const [isCreatePostFormVisible, setIsCreatePostFormVisible] = useState(false);\n  const [isUpdatePostFormVisible, setIsUpdatePostFormVisible] = useState(false);\n  const [isDeletePostFormVisible, setIsDeletePostFormVisible] = useState(false);\n\n  const showCreateForm = () => {\n    setIsCreatePostFormVisible(true);\n  };\n\n  const showUpdateForm = () => {\n    setIsUpdatePostFormVisible(true);\n  };\n\n  const showDeleteForm = () => {\n    setIsDeletePostFormVisible(true);\n  };\n\n  const hideCreateForm = () => {\n    setIsCreatePostFormVisible(false);\n  };\n\n  const hideUpdateForm = () => {\n    setIsUpdatePostFormVisible(false);\n  };\n\n  const hideDeleteForm = () => {\n    setIsDeletePostFormVisible(false);\n  };\n\n  return (\n    <div className=\"App content\">\n      <h1 className=\"App__title\">\n        CRUD\n      </h1>\n      <Menu\n        onCreateVisible={showCreateForm}\n        onUpdateVisible={showUpdateForm}\n        onDeleteVisible={showDeleteForm}\n        isCreateVisible={isCreatePostFormVisible}\n        isUpdateVisible={isUpdatePostFormVisible}\n        isDeleteVisible={isDeletePostFormVisible}\n      />\n      {\n        (isCreatePostFormVisible\n        || isUpdatePostFormVisible\n        || isDeletePostFormVisible)\n        && (\n          <Sidebar\n            isCreateVisible={isCreatePostFormVisible}\n            isUpdateVisible={isUpdatePostFormVisible}\n            isDeleteVisible={isDeletePostFormVisible}\n            onCreateHidden={hideCreateForm}\n            onUpdateHidden={hideUpdateForm}\n            onDeleteHidden={hideDeleteForm}\n          />\n        )\n      }\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}
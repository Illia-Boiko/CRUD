{"version":3,"sources":["requests.ts","components/Button/Button.tsx","components/Post/Post.tsx","components/ListOfPosts/ListOfPosts.tsx","components/Main/Main.tsx","components/SubmitButton/SubmitButton.tsx","components/Form/Form.tsx","components/ModalWindow/ModalWindow.tsx","App.tsx","index.tsx"],"names":["URL","getListOfPostsFromServer","a","fetch","listOfTodos","ok","json","Button","props","onClick","name","type","className","Post","post","id","title","body","ListOfPosts","posts","map","Main","onCreateVisible","onDeleteVisible","onUpdateVisible","isCreateVisible","isUpdateVisible","isDeleteVisible","useState","listOfPosts","setListOfPosts","isListVisible","setIsListVisible","getListOfPosts","useEffect","console","log","SubmitButton","Form","onHideForm","userId","postData","setPostData","clearState","onCancelButton","handleChange","event","target","value","placeholder","onChange","postUserId","postTitle","postBody","method","headers","JSON","stringify","createNewPostOnServer","postId","updatePostByIdOnServer","deletePostByIdFromServer","ModalWindow","App","isCreatePostFormVisible","setIsCreatePostFormVisible","isUpdatePostFormVisible","setIsUpdatePostFormVisible","isDeletePostFormVisible","setIsDeletePostFormVisible","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5a5b4f1.chunk.js","sourcesContent":["// const URL = 'https://jsonplaceholder.typicode.com/posts';\nconst URL = 'https://mate.academy/students-api/posts';\n\nexport async function getListOfPostsFromServer(): Promise<Post[] | null> {\n  const listOfTodos = await fetch(URL);\n\n  if (listOfTodos.ok) {\n    return listOfTodos.json();\n  }\n\n  return null;\n}\n\nexport const createNewPostOnServer = (postUserId = 0, postTitle = '', postBody = '') => {\n  return (\n    fetch(URL, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n      body: JSON.stringify({\n        userId: postUserId,\n        title: postTitle,\n        body: postBody,\n      }),\n    })\n  );\n};\n\nexport const deletePostByIdFromServer = (postId = 0) => {\n  return (\n    fetch(`${URL}/${postId}`, {\n      method: 'DELETE',\n    })\n  );\n};\n\nexport const updatePostByIdOnServer = (postId = 0, postTitle = '', postBody = '') => {\n  return (\n    fetch(`${URL}/${postId}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n      body: JSON.stringify({\n        title: postTitle,\n        body: postBody,\n      }),\n    })\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  onClick: () => void;\n  name: string;\n};\n\nexport const Button: React.FC<Props> = (props) => {\n  const { onClick, name } = props;\n\n  return (\n    <button\n      type=\"button\"\n      onClick={onClick}\n      className=\"Button button is-light\"\n    >\n      {name}\n    </button>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  post: Post;\n};\n\nexport const Post: React.FC<Props> = (props) => {\n  const { post } = props;\n\n  return (\n    <li\n      className=\"Post content is-normal\"\n    >\n      <span className=\"Post__id\">\n        {`Post id: ${post.id}`}\n      </span>\n      <h2 className=\"Post__title\">\n        {post.title}\n      </h2>\n      <span className=\"Post__body\">\n        {post.body}\n      </span>\n    </li>\n  );\n};\n","import React, { Fragment } from 'react';\nimport { Post } from '../Post';\n\ntype Props = {\n  posts: Post[] | null;\n};\n\nexport const ListOfPosts: React.FC<Props> = (props) => {\n  const { posts } = props;\n\n  return (\n    <ul className=\"ListOfPosts\">\n      {posts?.map(post => (\n        <Fragment key={post.id}>\n          <Post post={post} />\n        </Fragment>\n      ))}\n    </ul>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getListOfPostsFromServer } from '../../requests';\nimport { Button } from '../Button';\nimport { ListOfPosts } from '../ListOfPosts';\n\ntype Props = {\n  onCreateVisible: () => void;\n  onUpdateVisible: () => void;\n  onDeleteVisible: () => void;\n  isCreateVisible: boolean;\n  isUpdateVisible: boolean;\n  isDeleteVisible: boolean;\n};\n\nexport const Main: React.FC<Props> = (props) => {\n  const {\n    onCreateVisible,\n    onDeleteVisible,\n    onUpdateVisible,\n    isCreateVisible,\n    isUpdateVisible,\n    isDeleteVisible,\n  } = props;\n\n  const [listOfPosts, setListOfPosts] = useState<Post[] | null>([]);\n  const [isListVisible, setIsListVisible] = useState(false);\n\n  const changeVisibilityOfList = () => {\n    setIsListVisible(!isListVisible);\n  };\n\n  const getListOfPosts = (async () => {\n    const posts = await getListOfPostsFromServer();\n\n    setListOfPosts(posts);\n  });\n\n  useEffect(() => {\n    getListOfPosts();\n\n    // eslint-disable-next-line no-console\n    console.log('test');\n  }, [isCreateVisible, isUpdateVisible, isDeleteVisible]);\n\n  return (\n    <main className=\"Main App__Main box\">\n      <div className=\"Main__button-container\">\n        <Button\n          name=\"Update list\"\n          onClick={getListOfPosts}\n        />\n        <Button\n          name={isListVisible ? 'Hide list of posts' : 'Show list of posts'}\n          onClick={changeVisibilityOfList}\n        />\n        <Button\n          name=\"New post\"\n          onClick={onCreateVisible}\n        />\n        <Button\n          name=\"Update post\"\n          onClick={onUpdateVisible}\n        />\n        <Button\n          name=\"Delete post\"\n          onClick={onDeleteVisible}\n        />\n      </div>\n      {isListVisible && (\n        <ListOfPosts posts={listOfPosts} />\n      )}\n    </main>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  onClick: () => void\n};\n\nexport const SubmitButton: React.FC<Props> = (props) => {\n  const { onClick } = props;\n\n  return (\n    <button\n      type=\"button\"\n      onClick={onClick}\n      className=\"Button button is-dark\"\n    >\n      Ok\n    </button>\n  );\n};\n","import React, { useState } from 'react';\nimport { Button } from '../Button';\nimport { SubmitButton } from '../SubmitButton';\nimport {\n  createNewPostOnServer,\n  updatePostByIdOnServer,\n  deletePostByIdFromServer,\n} from '../../requests';\n\ntype Props = {\n  isCreateVisible: boolean;\n  isUpdateVisible: boolean;\n  isDeleteVisible: boolean;\n  onHideForm: () => void;\n};\n\ntype Event = React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLTextAreaElement>;\n\nexport const Form: React.FC<Props> = (props) => {\n  const {\n    isCreateVisible,\n    isUpdateVisible,\n    isDeleteVisible,\n    onHideForm,\n  } = props;\n\n  const [postData, setPostData] = useState<Partial<Post>>({\n    id: 0,\n    userId: 0,\n    title: '',\n    body: '',\n  });\n\n  const clearState = () => {\n    setPostData({\n      id: 0,\n      userId: 0,\n      title: '',\n      body: '',\n    });\n  };\n\n  const onCancelButton = () => {\n    clearState();\n    onHideForm();\n  };\n\n  const handleChange = (event: Event) => {\n    const { name, value } = event.target;\n\n    setPostData({\n      ...postData,\n      [name]: value,\n    });\n  };\n\n  const createPost = () => {\n    const { userId, title, body } = postData;\n\n    createNewPostOnServer(userId, title, body);\n    clearState();\n    onHideForm();\n  };\n\n  const updatePost = () => {\n    const { id, title, body } = postData;\n\n    updatePostByIdOnServer(id, title, body);\n    clearState();\n    onHideForm();\n  };\n\n  const deletePost = () => {\n    deletePostByIdFromServer(postData.id);\n    clearState();\n    onHideForm();\n  };\n\n  return (\n    <form className=\"Form field\">\n      {isCreateVisible && (\n        <>\n          <h2>Create new post</h2>\n          <input\n            type=\"number\"\n            name=\"userId\"\n            placeholder=\"Enter user id\"\n            className=\"Form__input input\"\n            value={postData.userId}\n            onChange={handleChange}\n          />\n          <input\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Enter the title\"\n            className=\"Form__input input\"\n            value={postData.title}\n            onChange={handleChange}\n          />\n          <textarea\n            name=\"body\"\n            placeholder=\"Enter the body\"\n            className=\"Form__input input\"\n            value={postData.body}\n            onChange={handleChange}\n          />\n          <div className=\"Form__buttons-container\">\n            <Button\n              name=\"Cancel\"\n              onClick={onCancelButton}\n            />\n            <SubmitButton onClick={createPost} />\n          </div>\n        </>\n      )}\n      {isUpdateVisible && (\n        <>\n          <h2>Update post</h2>\n          <input\n            type=\"number\"\n            name=\"id\"\n            placeholder=\"Enter post id\"\n            className=\"Form__input input\"\n            value={postData.id}\n            onChange={handleChange}\n          />\n          <input\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Enter the title\"\n            className=\"Form__input input\"\n            value={postData.title}\n            onChange={handleChange}\n          />\n          <textarea\n            name=\"body\"\n            placeholder=\"Enter the body\"\n            className=\"Form__input input\"\n            value={postData.body}\n            onChange={handleChange}\n          />\n          <div className=\"Form__buttons-container\">\n            <Button\n              name=\"Cancel\"\n              onClick={onCancelButton}\n            />\n            <SubmitButton onClick={updatePost} />\n          </div>\n        </>\n      )}\n      {isDeleteVisible && (\n        <>\n          <h2>Delete post</h2>\n          <input\n            type=\"number\"\n            name=\"id\"\n            placeholder=\"Enter post id\"\n            className=\"Form__input input\"\n            value={postData.id}\n            onChange={handleChange}\n          />\n          <div className=\"Form__buttons-container\">\n            <Button\n              name=\"Cancel\"\n              onClick={onCancelButton}\n            />\n            <SubmitButton onClick={deletePost} />\n          </div>\n        </>\n      )}\n    </form>\n  );\n};\n","import React from 'react';\nimport { Form } from '../Form';\n\ntype Props = {\n  isCreateVisible: boolean;\n  isUpdateVisible: boolean;\n  isDeleteVisible: boolean;\n  onHideForm: () => void;\n};\n\nexport const ModalWindow: React.FC<Props> = (props) => {\n  const {\n    isCreateVisible,\n    isUpdateVisible,\n    isDeleteVisible,\n    onHideForm,\n  } = props;\n\n  return (\n    <div className=\"eclipse\">\n      <section className=\"ModalWindow box\">\n        <Form\n          isCreateVisible={isCreateVisible}\n          isUpdateVisible={isUpdateVisible}\n          isDeleteVisible={isDeleteVisible}\n          onHideForm={onHideForm}\n        />\n      </section>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { Main } from './components/Main';\nimport { ModalWindow } from './components/ModalWindow';\n\nexport const App: React.FC = () => {\n  const [isCreatePostFormVisible, setIsCreatePostFormVisible] = useState(false);\n  const [isUpdatePostFormVisible, setIsUpdatePostFormVisible] = useState(false);\n  const [isDeletePostFormVisible, setIsDeletePostFormVisible] = useState(false);\n\n  const showCreateForm = () => {\n    setIsCreatePostFormVisible(true);\n  };\n\n  const showUpdateForm = () => {\n    setIsUpdatePostFormVisible(true);\n  };\n\n  const showDeleteForm = () => {\n    setIsDeletePostFormVisible(true);\n  };\n\n  const hideForm = () => {\n    setIsCreatePostFormVisible(false);\n    setIsUpdatePostFormVisible(false);\n    setIsDeletePostFormVisible(false);\n  };\n\n  return (\n    <div className=\"App content\">\n      <h1 className=\"App__title\">\n        CRUD\n      </h1>\n      <Main\n        onCreateVisible={showCreateForm}\n        onUpdateVisible={showUpdateForm}\n        onDeleteVisible={showDeleteForm}\n        isCreateVisible={isCreatePostFormVisible}\n        isUpdateVisible={isUpdatePostFormVisible}\n        isDeleteVisible={isDeletePostFormVisible}\n      />\n      {\n        (isCreatePostFormVisible\n        || isUpdatePostFormVisible\n        || isDeletePostFormVisible)\n        && (\n          <ModalWindow\n            isCreateVisible={isCreatePostFormVisible}\n            isUpdateVisible={isUpdatePostFormVisible}\n            isDeleteVisible={isDeletePostFormVisible}\n            onHideForm={hideForm}\n          />\n        )\n      }\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}
{"version":3,"sources":["requests.ts","components/Button/Button.tsx","components/Post/Post.tsx","components/ListOfPosts/ListOfPosts.tsx","components/Main/Main.tsx","components/SubmitButton/SubmitButton.tsx","components/Form/Form.tsx","components/ModalWindow/ModalWindow.tsx","App.tsx","index.tsx"],"names":["URL","getListOfPostsFromServer","a","fetch","listOfTodos","ok","json","Button","props","onClick","name","className","type","Post","post","id","title","body","ListOfPosts","posts","map","Main","onCreateVisible","onDeleteVisible","onUpdateVisible","isCreateVisible","isUpdateVisible","isDeleteVisible","useState","listOfPosts","setListOfPosts","isListVisible","setIsListVisible","getListOfPosts","useEffect","console","log","href","SubmitButton","Form","onHideForm","userId","postData","setPostData","clearState","onCancelButton","handleChange","event","target","value","placeholder","onChange","postUserId","postTitle","postBody","method","headers","JSON","stringify","createNewPostOnServer","postId","updatePostByIdOnServer","deletePostByIdFromServer","ModalWindow","App","isCreatePostFormVisible","setIsCreatePostFormVisible","isUpdatePostFormVisible","setIsUpdatePostFormVisible","isDeletePostFormVisible","setIsDeletePostFormVisible","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c5bd7c6.chunk.js","sourcesContent":["// const URL = 'https://jsonplaceholder.typicode.com/posts';\nconst URL = 'https://mate.academy/students-api/posts';\n\nexport async function getListOfPostsFromServer(): Promise<Post[] | null> {\n  const listOfTodos = await fetch(URL);\n\n  if (listOfTodos.ok) {\n    return listOfTodos.json();\n  }\n\n  return null;\n}\n\nexport const createNewPostOnServer = (postUserId = 0, postTitle = '', postBody = '') => {\n  return (\n    fetch(URL, {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n      body: JSON.stringify({\n        userId: postUserId,\n        title: postTitle,\n        body: postBody,\n      }),\n    })\n  );\n};\n\nexport const deletePostByIdFromServer = (postId = 0) => {\n  return (\n    fetch(`${URL}/${postId}`, {\n      method: 'DELETE',\n    })\n  );\n};\n\nexport const updatePostByIdOnServer = (postId = 0, postTitle = '', postBody = '') => {\n  return (\n    fetch(`${URL}/${postId}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n      body: JSON.stringify({\n        title: postTitle,\n        body: postBody,\n      }),\n    })\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  onClick: () => void;\n  name: string;\n  className?: string;\n};\n\nexport const Button: React.FC<Props> = (props) => {\n  const { onClick, name, className } = props;\n\n  return (\n    <button\n      type=\"button\"\n      onClick={onClick}\n      className={`Button button is-light ${className}`}\n    >\n      {name}\n    </button>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  post: Post;\n};\n\nexport const Post: React.FC<Props> = (props) => {\n  const { post } = props;\n\n  return (\n    <li\n      className=\"Post content is-normal\"\n    >\n      <span className=\"Post__id\">\n        {`Post id: ${post.id}`}\n      </span>\n      <h2 className=\"Post__title\">\n        {post.title}\n      </h2>\n      <span className=\"Post__body\">\n        {post.body}\n      </span>\n    </li>\n  );\n};\n","import React, { Fragment } from 'react';\nimport { Post } from '../Post';\n\ntype Props = {\n  posts: Post[] | null;\n};\n\nexport const ListOfPosts: React.FC<Props> = (props) => {\n  const { posts } = props;\n\n  return (\n    <ul className=\"ListOfPosts\">\n      {posts?.map(post => (\n        <Fragment key={post.id}>\n          <Post post={post} />\n        </Fragment>\n      ))}\n    </ul>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { getListOfPostsFromServer } from '../../requests';\nimport { Button } from '../Button';\nimport { ListOfPosts } from '../ListOfPosts';\n\ntype Props = {\n  onCreateVisible: () => void;\n  onUpdateVisible: () => void;\n  onDeleteVisible: () => void;\n  isCreateVisible: boolean;\n  isUpdateVisible: boolean;\n  isDeleteVisible: boolean;\n};\n\nexport const Main: React.FC<Props> = (props) => {\n  const {\n    onCreateVisible,\n    onDeleteVisible,\n    onUpdateVisible,\n    isCreateVisible,\n    isUpdateVisible,\n    isDeleteVisible,\n  } = props;\n\n  const [listOfPosts, setListOfPosts] = useState<Post[] | null>([]);\n  const [isListVisible, setIsListVisible] = useState(false);\n\n  const changeVisibilityOfList = () => {\n    setIsListVisible(!isListVisible);\n  };\n\n  const getListOfPosts = (async () => {\n    const posts = await getListOfPostsFromServer();\n\n    setListOfPosts(posts);\n  });\n\n  useEffect(() => {\n    getListOfPosts();\n\n    // eslint-disable-next-line no-console\n    console.log('test');\n  }, [isCreateVisible, isUpdateVisible, isDeleteVisible]);\n\n  return (\n    <main className=\"Main App__Main box\">\n      <a\n        href=\"#bottom\"\n        className=\"arrow-button button\"\n      >\n        &#8595;\n      </a>\n      <div className=\"Main__button-container\">\n        <Button\n          name=\"Update list\"\n          onClick={getListOfPosts}\n          className=\"is-info\"\n        />\n        <Button\n          name={isListVisible ? 'Hide list of posts' : 'Show list of posts'}\n          onClick={changeVisibilityOfList}\n        />\n        <Button\n          name=\"New post\"\n          onClick={onCreateVisible}\n        />\n        <Button\n          name=\"Update post\"\n          onClick={onUpdateVisible}\n        />\n        <Button\n          name=\"Delete post\"\n          onClick={onDeleteVisible}\n        />\n      </div>\n      {isListVisible && (\n        <>\n          <ListOfPosts posts={listOfPosts} />\n          <a\n            href=\"#top\"\n            id=\"bottom\"\n            className=\"button to-start-button is-light\"\n          >\n            To start\n          </a>\n        </>\n      )}\n    </main>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  onClick: () => void\n};\n\nexport const SubmitButton: React.FC<Props> = (props) => {\n  const { onClick } = props;\n\n  return (\n    <button\n      type=\"button\"\n      onClick={onClick}\n      className=\"Button button is-dark\"\n    >\n      Ok\n    </button>\n  );\n};\n","import React, { useState } from 'react';\nimport { Button } from '../Button';\nimport { SubmitButton } from '../SubmitButton';\nimport {\n  createNewPostOnServer,\n  updatePostByIdOnServer,\n  deletePostByIdFromServer,\n} from '../../requests';\n\ntype Props = {\n  isCreateVisible: boolean;\n  isUpdateVisible: boolean;\n  isDeleteVisible: boolean;\n  onHideForm: () => void;\n};\n\ntype Event = React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLTextAreaElement>;\n\nexport const Form: React.FC<Props> = (props) => {\n  const {\n    isCreateVisible,\n    isUpdateVisible,\n    isDeleteVisible,\n    onHideForm,\n  } = props;\n\n  const [postData, setPostData] = useState<Partial<Post>>({\n    id: 0,\n    userId: 0,\n    title: '',\n    body: '',\n  });\n\n  const clearState = () => {\n    setPostData({\n      id: 0,\n      userId: 0,\n      title: '',\n      body: '',\n    });\n  };\n\n  const onCancelButton = () => {\n    clearState();\n    onHideForm();\n  };\n\n  const handleChange = (event: Event) => {\n    const { name, value } = event.target;\n\n    setPostData({\n      ...postData,\n      [name]: value,\n    });\n  };\n\n  const createPost = () => {\n    const { userId, title, body } = postData;\n\n    createNewPostOnServer(userId, title, body);\n    clearState();\n    onHideForm();\n  };\n\n  const updatePost = () => {\n    const { id, title, body } = postData;\n\n    updatePostByIdOnServer(id, title, body);\n    clearState();\n    onHideForm();\n  };\n\n  const deletePost = () => {\n    deletePostByIdFromServer(postData.id);\n    clearState();\n    onHideForm();\n  };\n\n  return (\n    <form className=\"Form field\">\n      {isCreateVisible && (\n        <>\n          <h2>Create new post</h2>\n          <input\n            type=\"number\"\n            name=\"userId\"\n            placeholder=\"Enter user id\"\n            className=\"Form__input input\"\n            value={postData.userId}\n            onChange={handleChange}\n          />\n          <input\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Enter the title\"\n            className=\"Form__input input\"\n            value={postData.title}\n            onChange={handleChange}\n          />\n          <textarea\n            name=\"body\"\n            placeholder=\"Enter the body\"\n            className=\"Form__input input\"\n            value={postData.body}\n            onChange={handleChange}\n          />\n          <div className=\"Form__buttons-container\">\n            <Button\n              name=\"Cancel\"\n              onClick={onCancelButton}\n            />\n            <SubmitButton onClick={createPost} />\n          </div>\n        </>\n      )}\n      {isUpdateVisible && (\n        <>\n          <h2>Update post</h2>\n          <input\n            type=\"number\"\n            name=\"id\"\n            placeholder=\"Enter post id\"\n            className=\"Form__input input\"\n            value={postData.id}\n            onChange={handleChange}\n          />\n          <input\n            type=\"text\"\n            name=\"title\"\n            placeholder=\"Enter the title\"\n            className=\"Form__input input\"\n            value={postData.title}\n            onChange={handleChange}\n          />\n          <textarea\n            name=\"body\"\n            placeholder=\"Enter the body\"\n            className=\"Form__input input\"\n            value={postData.body}\n            onChange={handleChange}\n          />\n          <div className=\"Form__buttons-container\">\n            <Button\n              name=\"Cancel\"\n              onClick={onCancelButton}\n            />\n            <SubmitButton onClick={updatePost} />\n          </div>\n        </>\n      )}\n      {isDeleteVisible && (\n        <>\n          <h2>Delete post</h2>\n          <input\n            type=\"number\"\n            name=\"id\"\n            placeholder=\"Enter post id\"\n            className=\"Form__input input\"\n            value={postData.id}\n            onChange={handleChange}\n          />\n          <div className=\"Form__buttons-container\">\n            <Button\n              name=\"Cancel\"\n              onClick={onCancelButton}\n            />\n            <SubmitButton onClick={deletePost} />\n          </div>\n        </>\n      )}\n    </form>\n  );\n};\n","import React from 'react';\nimport { Form } from '../Form';\n\ntype Props = {\n  isCreateVisible: boolean;\n  isUpdateVisible: boolean;\n  isDeleteVisible: boolean;\n  onHideForm: () => void;\n};\n\nexport const ModalWindow: React.FC<Props> = (props) => {\n  const {\n    isCreateVisible,\n    isUpdateVisible,\n    isDeleteVisible,\n    onHideForm,\n  } = props;\n\n  return (\n    <div className=\"eclipse\">\n      <section className=\"ModalWindow box\">\n        <Form\n          isCreateVisible={isCreateVisible}\n          isUpdateVisible={isUpdateVisible}\n          isDeleteVisible={isDeleteVisible}\n          onHideForm={onHideForm}\n        />\n      </section>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { Main } from './components/Main';\nimport { ModalWindow } from './components/ModalWindow';\n\nexport const App: React.FC = () => {\n  const [isCreatePostFormVisible, setIsCreatePostFormVisible] = useState(false);\n  const [isUpdatePostFormVisible, setIsUpdatePostFormVisible] = useState(false);\n  const [isDeletePostFormVisible, setIsDeletePostFormVisible] = useState(false);\n\n  const showCreateForm = () => {\n    setIsCreatePostFormVisible(true);\n  };\n\n  const showUpdateForm = () => {\n    setIsUpdatePostFormVisible(true);\n  };\n\n  const showDeleteForm = () => {\n    setIsDeletePostFormVisible(true);\n  };\n\n  const hideForm = () => {\n    setIsCreatePostFormVisible(false);\n    setIsUpdatePostFormVisible(false);\n    setIsDeletePostFormVisible(false);\n  };\n\n  return (\n    <div className=\"App content\">\n      <div id=\"top\"></div>\n      <h1 className=\"App__title\">\n        CRUD\n      </h1>\n      <Main\n        onCreateVisible={showCreateForm}\n        onUpdateVisible={showUpdateForm}\n        onDeleteVisible={showDeleteForm}\n        isCreateVisible={isCreatePostFormVisible}\n        isUpdateVisible={isUpdatePostFormVisible}\n        isDeleteVisible={isDeletePostFormVisible}\n      />\n      {\n        (isCreatePostFormVisible\n        || isUpdatePostFormVisible\n        || isDeletePostFormVisible)\n        && (\n          <ModalWindow\n            isCreateVisible={isCreatePostFormVisible}\n            isUpdateVisible={isUpdatePostFormVisible}\n            isDeleteVisible={isDeletePostFormVisible}\n            onHideForm={hideForm}\n          />\n        )\n      }\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}